class Solution {
public:
    int minDifference(vector<int>& arr) {
        int n = arr.size();
        int sum = 0;
        
        // Calculate total sum
        for (int num : arr) {
            sum += num;
        }
        
        // DP Table: Can we form a subset with sum 'j' using first 'i' elements
        vector<vector<bool>> dp(n, vector<bool>(sum+1, 0));
        
        for (int i = 0; i < n; i++) {
            dp[i][0] = true;
        }

        if (arr[0] <= sum) {
            dp[0][arr[0]] = true;
        }

        for (int i = 1; i < n; i++) {
            for (int j = 1; j <= sum; j++) {
                bool notTake = dp[i - 1][j];
                bool take = false;
                if(arr[i]<=j){
                    take = dp[i-1][j-arr[i]];
                }
                dp[i][j] = take || notTake;
            }
        }

        int mini = INT_MAX;
        for (int i = 0; i <= sum / 2; i++) {
            if (dp[n - 1][i]) {  
                int s1 = i;
                int s2 = sum - i;
                mini = min(mini, abs(s1 - s2));
            }
        }

        return mini;
    }
};
