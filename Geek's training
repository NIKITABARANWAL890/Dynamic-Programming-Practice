Recursion:
class Solution {
public:
    int maximumPointsHelper(const std::vector<std::vector<int>>& arr, int n, int last) {
        if (n < 0) {
            return 0;
        }

        int maxi = 0;
        for (int i = 0; i < 3; ++i) {
            if (i != last) {
                int points = arr[n][i] + maximumPointsHelper(arr, n - 1, i);
                maxi = std::max(maxi, points);
            }
        }
        return maxi;
    }

    int maximumPoints(std::vector<std::vector<int>>& arr) {
        int n = arr.size();
        return maximumPointsHelper(arr, n - 1, -1);
    }
};


Memoization:

class Solution {
public:
    int maximumPointsHelper(vector<vector<int>>& arr, int last, int n, vector<vector<int>>&memo) {
        // Base case: when at the first day (n == 0)
        if (n == 0) {
            int maxi = 0;
            for (int i = 0; i < 3; i++) {
                if (i != last) {
                    maxi = max(maxi, arr[0][i]);
                }
            }
            return maxi;
        }
        
        if(memo[n][last]!=-1) return memo[n][last];
        
        int maxi = 0;
        for (int i = 0; i < 3; i++) {
            if (i != last) {
                int points = arr[n][i] + maximumPointsHelper(arr, i, n - 1, memo);
                maxi = max(maxi, points);
            }
        }
        return memo[n][last] = maxi;
    }

    int maximumPoints(vector<vector<int>>& arr) {
        int n = arr.size();
        vector<vector<int>>memo(n, vector<int>(4, -1));
        // Start recursion with last activity as 3 (an invalid index) to allow any activity on the first day
        return maximumPointsHelper(arr, 3, n - 1, memo);
    }
};


DP:

class Solution {
public:
    int maximumPoints(vector<vector<int>>& arr) {
        int n = arr.size();
        vector<vector<int>> dp(n, vector<int>(4, 0));

        // Corrected initialization for the first day
        dp[0][0] = max(arr[0][1], arr[0][2]); // When task 0 is not performed
        dp[0][1] = max(arr[0][0], arr[0][2]); // When task 1 is not performed
        dp[0][2] = max(arr[0][0], arr[0][1]); // When task 2 is not performed
        dp[0][3] = max({arr[0][0], arr[0][1], arr[0][2]}); // When any task can be performed

        // Fill the dp table for subsequent days
        for (int day = 1; day < n; day++) {
            for (int last = 0; last < 4; last++) {
                dp[day][last] = 0;
                for (int task = 0; task < 3; task++) {
                    if (task != last) {
                        int points = arr[day][task] + dp[day - 1][task];
                        dp[day][last] = max(dp[day][last], points);
                    }
                }
            }
        }

        // Return the maximum points achievable on the last day when any task can be performed
        return dp[n - 1][3];
    }
};

Space optimization:

class Solution {
public:
    int maximumPoints(vector<vector<int>>& arr) {
        int n = arr.size();
        vector<int>prev(4,0);

        // Corrected initialization for the first day
        prev[0] = max(arr[0][1], arr[0][2]); // When task 0 is not performed
        prev[1] = max(arr[0][0], arr[0][2]); // When task 1 is not performed
        prev[2] = max(arr[0][0], arr[0][1]); // When task 2 is not performed
        prev[3] = max({arr[0][0], arr[0][1], arr[0][2]}); // When any task can be performed

        // Fill the dp table for subsequent days
        for (int day = 1; day < n; day++) {
            vector<int>temp(4, 0);
            for (int last = 0; last < 4; last++) {
                temp[last] = 0;
                for (int task = 0; task < 3; task++) {
                    if (task != last) {
                        temp[last] = max(temp[last], arr[day][task] + prev[task]);
                    }
                }
            }
            prev = temp;
        }

        // Return the maximum points achievable on the last day when any task can be performed
        return prev[3];
    }
};

