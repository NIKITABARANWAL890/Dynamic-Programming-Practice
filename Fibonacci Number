Mmeoization:
#include <bits/stdc++.h>
using namespace std;

int getFib(int n, vector<int>& dp){
    if(n <= 1) return n;
    if(dp[n] != -1) return dp[n];
    
    return dp[n] = getFib(n-1, dp) + getFib(n-2, dp);
}

int main() {
    int n;
    cin >> n;
    vector<int> dp(n+1, -1);
    cout << getFib(n, dp);
    return 0;
}


DP: 
//Space- O(n), Time- O(n)
#include <bits/stdc++.h>
using namespace std;

int getFib(int n, vector<int>& dp){
    dp[0]=0;
    dp[1]=1;
    for(int i=2; i<=n; i++){
        dp[i] = dp[i-1]+dp[i-2];
    }
    return dp[n];
}

int main() {
    int n;
    cin >> n;
    vector<int> dp(n+1, 0);
    cout << getFib(n, dp);
    return 0;
}

//Space- O(1), Time- O(n)
#include <bits/stdc++.h>
using namespace std;

int getFib(int n){
    int prev1 = 0;
    int prev2 = 1;
    for(int i=2; i<=n; i++){
        int curr = prev1 + prev2;
        prev1 = prev2;
        prev2 = curr;
    }
    return prev2;
}

int main() {
    int n;
    cin >> n;
    cout << getFib(n);
    return 0;
}
