Recursion:
class Solution {
  public:
  int getPerfectSumCount(vector<int>&arr, int target, int n, int ind, int sum){
      if(sum>target) return 0;
      if(ind==n){
          if(sum==target){
              return 1;
          }
        return 0;
      }
      int l = getPerfectSumCount(arr, target, n, ind+1, sum+arr[ind]);
      int r = getPerfectSumCount(arr, target, n, ind+1, sum);
      return l+r;
  }
    int perfectSum(vector<int>& arr, int target) {
        int n = arr.size();
        return getPerfectSumCount(arr, target, n, 0, 0);
    }
};

Memoization:
class Solution {
  public:
  int getPerfectSumCount(vector<int>&arr, int target, int n, vector<vector<int>>&memo){
      if(target==0) return 1;
      if(n==0){
          return arr[0]==target;
      }
      if(memo[n][target]!=-1) return memo[n][target];
      int notTake = getPerfectSumCount(arr, target, n-1, memo);
      int take = 0;
      if(arr[n]<=target){
        take = getPerfectSumCount(arr, target-arr[n], n-1, memo); 
      }
      return memo[n][target] = take+notTake;
  }
    int perfectSum(vector<int>& arr, int target) {
        int n = arr.size();
        vector<vector<int>>memo(n, vector<int>(target+1, -1));
        return getPerfectSumCount(arr, target, n-1, memo);
    }
};

DP:
class Solution {
  public:
    int perfectSum(vector<int>& arr, int target) {
        int n = arr.size();
        vector<vector<int>>dp(n, vector<int>(target+1, 0));
        for(int i=0; i<n; i++){
            dp[i][0]=1;
        }
        if(arr[0]<=target) dp[0][arr[0]]=1;
        for(int ind=1; ind<n; ind++){
            for(int sum=1; sum<=target; sum++){
                int notTake = dp[ind-1][sum];
                int take = 0;
                if(arr[ind]<=sum){
                    take = dp[ind-1][sum-arr[ind]]; 
                }
                dp[ind][sum] = take+notTake;
            }
        }
        return dp[n-1][target];
    }
};
