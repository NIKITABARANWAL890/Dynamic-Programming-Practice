//RECURSION

class Solution {
  public:
    // Function to find length of shortest common supersequence of two strings.
    int getshortestCommonSupersequence(string &s1, string &s2, int n, int m){
        if(n==0 || m==0){
            return m+n;
        }
        if(s1[n-1]==s2[m-1]){
            return 1 + getshortestCommonSupersequence(s1, s2, n-1, m-1);
        }else{
            return 1 + min(getshortestCommonSupersequence(s1, s2, n-1, m), getshortestCommonSupersequence(s1, s2, n, m-1));
        }
        return 0;
    }
    int shortestCommonSupersequence(string &s1, string &s2) {
        // code here
        int n = s1.size();
        int m = s2.size();
        return getshortestCommonSupersequence(s1, s2, n, m);
    }
};


//MEMOIZATION

class Solution {
  public:
    // Function to find length of shortest common supersequence of two strings.
    int getshortestCommonSupersequence(string &s1, string &s2, int n, int m, vector<vector<int>>&memo){
        if(n==0 || m==0){
            return m+n;
        }
        if(memo[n][m]!=-1) return memo[n][m];
        if(s1[n-1]==s2[m-1]){
            return memo[n][m] = 1 + getshortestCommonSupersequence(s1, s2, n-1, m-1, memo);
        }else{
            return memo[n][m] = 1 + min(getshortestCommonSupersequence(s1, s2, n-1, m, memo), getshortestCommonSupersequence(s1, s2, n, m-1, memo));
        }
        return 0;
    }
    int shortestCommonSupersequence(string &s1, string &s2) {
        // code here
        int n = s1.size();
        int m = s2.size();
        vector<vector<int>>memo(n+1, vector<int>(m+1, -1));
        return getshortestCommonSupersequence(s1, s2, n, m, memo);
    }
};

//DP

class Solution {
  public:
    int shortestCommonSupersequence(string &s1, string &s2) {
        // code here
        int n = s1.size();
        int m = s2.size();
        vector<vector<int>>dp(n+1, vector<int>(m+1, 0));
        for(int i=0; i<n+1; i++){
            for(int j=0; j<m+1; j++){
                if(i==0 || j==0) dp[i][j]=i+j;
                else if(s1[i-1]==s2[j-1]){
                    dp[i][j] = 1 + dp[i-1][j-1];
                }else{
                    dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1]);
                }
            }
        }
        return dp[n][m];
    }
};
