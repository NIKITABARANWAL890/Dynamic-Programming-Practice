//Same as subsets sum only difference is target=(sum)/2

Space Optimization:
class Solution {
  public:
  bool canPartition(vector<int>& nums) {
      int n = nums.size();
      int sum=0;
      for(int i=0; i<n; i++){
        sum += nums[i];
      }
      if(sum%2!=0) return false;
      sum=sum/2;
      vector<bool>prev(sum+1, 0);
      vector<bool>curr(sum+1, 0);
      prev[0]=true;
      curr[0]=true;
      if(nums[0]<=sum)prev[nums[0]]=true;
      for(int i=1; i<n; i++){
          for(int j=1; j<=sum; j++){
              bool notTake = prev[j];
              bool take = false;
              if(j>=nums[i]){
                  take = prev[j-nums[i]];
              }
              curr[j] = take || notTake;
          }
          prev = curr;
      }
      return prev[sum];
  }
};
