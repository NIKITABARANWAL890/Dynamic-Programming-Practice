Recursion:
class Solution {
public:
int uniquePathsWithObstaclesHelper(vector<vector<int>>& obstacleGrid, int m, int n){
    if(m>=0 && n>=0 && obstacleGrid[m][n]==1) return 0;
    if(m==0 && n==0) return 1;
    if(m<0 || n<0) return 0;
    int up = uniquePathsWithObstaclesHelper(obstacleGrid, m-1, n);
    int left = uniquePathsWithObstaclesHelper(obstacleGrid, m, n-1); 
    return up+left;
}
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();
        return uniquePathsWithObstaclesHelper(obstacleGrid, m-1, n-1);
    }
};

Memiozation:
class Solution {
public:
int uniquePathsWithObstaclesHelper(vector<vector<int>>& obstacleGrid, int m, int n, vector<vector<int>>&memo){
    if(m>=0 && n>=0 && obstacleGrid[m][n]==1) return 0;
    if(m==0 && n==0) return 1;
    if(m<0 || n<0) return 0;
    if(memo[m][n] != -1) return memo[m][n];
    int up = uniquePathsWithObstaclesHelper(obstacleGrid, m-1, n, memo);
    int left = uniquePathsWithObstaclesHelper(obstacleGrid, m, n-1, memo); 
    return memo[m][n] =  up+left;
}
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();
        vector<vector<int>>memo(m, vector<int>(n, -1));
        return uniquePathsWithObstaclesHelper(obstacleGrid, m-1, n-1, memo);
    }
};

DP:
class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();

        if (obstacleGrid[0][0] == 1) return 0;

        vector<vector<int>> dp(m, vector<int>(n, 0));
        dp[0][0] = 1;

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (i == 0 && j == 0) continue;  
                if (obstacleGrid[i][j] == 1) {
                    dp[i][j] = 0;
                } else {
                    int up = (i > 0) ? dp[i-1][j] : 0;
                    int left = (j > 0) ? dp[i][j-1] : 0;
                    dp[i][j] = up + left;
                }
            }
        }

        return dp[m-1][n-1]; 
    }
};

Space Optimized:
class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();

        if (obstacleGrid[0][0] == 1) return 0;
        
        vector<int> prev(n, 0);  // `prev` should be of size `n`, not `m`
        
        for (int i = 0; i < m; i++) {
            vector<int> curr(n, 0);
            for (int j = 0; j < n; j++) {
                if (obstacleGrid[i][j] == 1) {
                    curr[j] = 0;  // If there's an obstacle, no paths go through this cell
                } else if (i == 0 && j == 0) {
                    curr[j] = 1;  // Start position should be initialized to 1
                } else {
                    int up = (i > 0) ? prev[j] : 0;   // Value from the previous row
                    int left = (j > 0) ? curr[j-1] : 0;  // Value from the previous column
                    curr[j] = up + left;
                }
            }
            prev = curr;  // Update `prev` to the current row
        }

        return prev[n-1];  // Final answer stored in the last cell of `prev`
    }
};
