Recursion:
class Solution {
public:
    int minimumTotalHelper(vector<vector<int>>& triangle, int m, int i, int last) {
        if (i == m) { // Base case: last row
            return triangle[i][last];
        }
        
        int left = INT_MAX, right = INT_MAX;
        left = triangle[i][last] + minimumTotalHelper(triangle, m, i + 1, last);
        right = triangle[i][last] + minimumTotalHelper(triangle, m, i + 1, last + 1);

        return min(left, right);
    }

    int minimumTotal(vector<vector<int>>& triangle) {
        int m = triangle.size();
        return minimumTotalHelper(triangle, m - 1, 0, 0);
    }
};

Memoization:
class Solution {
public:
    int minimumTotalHelper(vector<vector<int>>& triangle, int m, int i, int last, vector<vector<int>>&memo) {
        if (i == m) { // Base case: last row
            return triangle[i][last];
        }
        if(memo[i][last] != -1) return memo[i][last];
        int left = INT_MAX, right = INT_MAX;
        left = triangle[i][last] + minimumTotalHelper(triangle, m, i + 1, last, memo);
        right = triangle[i][last] + minimumTotalHelper(triangle, m, i + 1, last + 1, memo);

        return memo[i][last] = min(left, right);
    }

    int minimumTotal(vector<vector<int>>& triangle) {
        int m = triangle.size();
        vector<vector<int>> memo(m);  
        for (int i = 0; i < m; i++) {  
            memo[i] = vector<int>(i + 1, -1); 
        }

        return minimumTotalHelper(triangle, m - 1, 0, 0, memo);
    }
};

DP:
class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        int m = triangle.size();
        vector<vector<int>> dp(m, vector<int>(m, 0)); 
        for(int j=0; j<m; j++){
            dp[m-1][j]=triangle[m-1][j];
        }
        for(int i=m-2; i>=0; i--){
            for(int j=i; j>=0; j--){
                int d = triangle[i][j] + dp[i+1][j];
                int dg = triangle[i][j] + dp[i+1][j+1];
                dp[i][j] = min(d, dg);
            }
        }
        return dp[0][0];
    }
};


Space Optimization:
class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        int m = triangle.size();
        vector<int>prev(m, 0); 
        vector<int>curr(m, 0);
        for(int j=0; j<m; j++){
            prev[j]=triangle[m-1][j];
        }
        for(int i=m-2; i>=0; i--){
            for(int j=i; j>=0; j--){
                int d = triangle[i][j] + prev[j];
                int dg = triangle[i][j] + prev[j+1];
                curr[j] = min(d, dg);
            }
            prev = curr;
        }
        return prev[0];
    }
};
