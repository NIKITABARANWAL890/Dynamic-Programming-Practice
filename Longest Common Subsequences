//RECURSION

class Solution {
public:
int getlongestCommonSubsequence(string text1, string text2){
    if(text1=="" || text2=="") return 0;
    if(text1[0]==text2[0]){
        return 1+getlongestCommonSubsequence(text1.substr(1), text2.substr(1));
    }else{
        return max(getlongestCommonSubsequence(text1.substr(1), text2), getlongestCommonSubsequence(text1, text2.substr(1)));
    }
}
    int longestCommonSubsequence(string text1, string text2) {
        return getlongestCommonSubsequence(text1, text2);
    }
};

//MEMOIZATION

class Solution {
public:
int getlongestCommonSubsequence(string &text1, string &text2, int i, int j, vector<vector<int>>&memo){
    if(i>=text1.size() || j>=text2.size()) return 0;
    if(memo[i][j]!=-1){
        return memo[i][j];
    }
    if(text1[i]==text2[j]){
        return memo[i][j] = 1+getlongestCommonSubsequence(text1, text2, i+1, j+1, memo);
    }else{
        return memo[i][j] = max(getlongestCommonSubsequence(text1, text2, i+1, j, memo), getlongestCommonSubsequence(text1, text2, i, j+1, memo));
    }
}
    int longestCommonSubsequence(string text1, string text2) {
        vector<vector<int>> memo(text1.size(), vector<int>(text2.size(), -1));
        return getlongestCommonSubsequence(text1, text2, 0, 0, memo);
    }
};

//DP

class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        int m = text1.size(), n = text2.size();
        vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));

        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (text1[i - 1] == text2[j - 1]) {
                    dp[i][j] = 1 + dp[i - 1][j - 1];  
                } else {
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]); 
                }
            }
        }
        return dp[m][n];
    }
};
